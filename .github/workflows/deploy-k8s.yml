on:
  workflow_call:
    inputs:
      KUBE_NAMESPACE:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      k8s_cluster_name:
        required: true
        type: string
      app_name:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SESSION_TOKEN:
        required: false
      WEBHOOK_TOKEN:
        required: true
      EXCHANGE_API_KEY:
        required: true
      ROCKET_SECRET_KEY:
        required: true
      REDIS_PASSWORD:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # optional

      - name: use awscli 
        uses: unfor19/install-aws-cli-action@master
        with:
          version: 2
      
      - run: aws --version 
        shell: bash

      - name: login to EKS
        id: kubeconfig
        run: | 
          echo "::add-mask::$(aws eks --region ${{ inputs.aws_region }} update-kubeconfig --name ${{ inputs.k8s_cluster_name }} --dry-run | base64 -w 0)"
          echo "::set-output name=KUBECONFIG::$(aws eks --region ${{ inputs.aws_region }} update-kubeconfig --name ${{ inputs.k8s_cluster_name }} --dry-run | base64 -w 0)"
        shell: bash
       
      - name: Generate k8s secret params
        id: genparams
        shell: bash
        run: |
            cat .github/workflows/ci-properties.json
            for i in `cat .github/workflows/ci-properties.json | jq -r .APP_ENV_VARS | jq -r 'keys[]'`; do params="${params} --from-literal=$i=$(cat .github/workflows/ci-properties.json | jq -r .APP_ENV_VARS.$i)"; done # add envs from ci-properties.json file
            params="${params} --from-literal=WEBHOOK_TOKEN=${{ secrets.WEBHOOK_TOKEN }} --from-literal=EXCHANGE_API_KEY=${{ secrets.EXCHANGE_API_KEY }} --from-literal=ROCKET_SECRET_KEY=${{ secrets.ROCKET_SECRET_KEY }} --from-literal=REDIS_URI=redis://:${{ secrets.REDIS_PASSWORD }}@master.redis-k8s-prod.id1ugm.use2.cache.amazonaws.com:6379"
            echo "::set-output name=k8sparams::$params"
            #echo "::add-mask::$params"

      - name: Create kubernetes secret with service parameters
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.kubeconfig.outputs.KUBECONFIG }}
        with:
          args: create secret generic ${{ inputs.app_name }} -n ${{ inputs.KUBE_NAMESPACE }} ${{ steps.genparams.outputs.k8sparams }} --save-config --dry-run=client -o yaml | kubectl apply -f -

      - name: kubernets apply config
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.kubeconfig.outputs.KUBECONFIG }}
        with:
          args: apply -f deployment.yaml -n ${{ inputs.KUBE_NAMESPACE }}

      - name: rollout
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ steps.kubeconfig.outputs.KUBECONFIG }}
        with:
          args: rollout restart deploy/${{ inputs.app_name }} -n ${{ inputs.KUBE_NAMESPACE }}
